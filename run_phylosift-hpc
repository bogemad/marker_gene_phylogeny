#!/usr/bin/env python3

import os, shutil, subprocess, re

def make_temp_dirs(base_path, temp):
	if os.path.isdir(os.path.join(base_path, 'temp')) == False:
		os.mkdir(os.path.join(base_path, 'temp'))
	if os.path.isdir(temp):
		shutil.rmtree(temp)
	os.mkdir(temp)


def submit_phylosift_job(temp, new_file_name, i, base_path, out, script_path):
	print("Running phylosift on {}".format(new_file_name))
	with open(os.path.join(temp, "jobids.txt"), 'a') as jobids:
		subprocess.run(['qsub',
			'-N', 'Phylosift_{}'.format(i),
			'-l', 'ncpus=1',
			'-l', 'mem=8gb',
			'-l', 'walltime=2:00:00',
			'-q', 'smallq',
			'-o', os.path.join(base_path, 'logs', 'Phylosift_{}.out'.format(i)),
			'-e', os.path.join(base_path, 'logs', 'Phylosift_{}.err'.format(i)),
			'-v', 'base_path={}, out={}, file={}, num={}'.format(base_path, out, new_file_name, i),
			os.path.join(script_path, 'Phylosift_multirun.sh')], stdout=jobids)

def main():
	base_path = os.path.dirname(os.path.realpath(__file__))
	print("\nbase_path = {}".format(base_path))
	out = os.path.join(base_path, 'raw_data')
	print("out = {}".format(out))
	temp = os.path.join(base_path, 'temp', 'phylosift_scripts')
	print("temp = {}".format(temp))
	script_path = os.path.join(base_path, 'scripts')
	print("script_path = {}".format(script_path))
	out_files = os.listdir(out)
	print("\nDetected {} genomes for analysis\n".format(sum(os.path.isdir(os.path.join(out, file))==False for file in out_files)))
	ps_temp_path = os.path.join(out, 'PS_temp')
	print("ps_temp_path = {}".format(ps_temp_path))
	if os.path.isdir(ps_temp_path):
		ps_temp_dirs = os.listdir(ps_temp_path)
	else:
		ps_temp_dirs = ""
	print("\nDetected analysis completed for {} genomes.\n".format(len(ps_temp_dirs)))
	make_temp_dirs(base_path, temp)
	print("Variable and folder setup complete.")
	for i, file in enumerate(out_files):
		if os.path.isdir(os.path.join(out, file)):
			continue
		new_file_name = re.sub(r'[^A-Za-z0-9_.-]', '_', file)
		os.rename(os.path.join(out, file), os.path.join(out, new_file_name))
		if ps_temp_path != "":
			if not new_file_name in ps_temp_dirs:
				submit_phylosift_job(temp, new_file_name, i, base_path, out, script_path)
		else:
			submit_phylosift_job(temp, new_file_name, i, base_path, out, script_path)
	if os.path.isfile(os.path.join(temp, "jobids.txt")):
		with open(os.path.join(temp, "jobids.txt")) as jobid_h:
			jobids = [ x.strip() for x in jobid_h if x != "" ]
			null = subprocess.run(['qsub',
				'-N', 'build_tree'.format(i),
				'-l', 'ncpus=1',
				'-l', 'mem=1gb',
				'-l', 'walltime=1:00:00',
				'-q', 'smallq',
				'-j', 'oe',
				'-o', os.path.join(base_path, 'logs', 'build_tree.log'.format(i)),
				'-W', 'depend=afterok:{}'.format(":".join(jobids)),
				'-v', 'base_path={}'.format(base_path),
				os.path.join(base_path, 'scripts', 'build_tree-hpc')])
		os.remove(os.path.join(temp, "jobids.txt"))
	else:
		null = subprocess.run(['qsub',
			'-N', 'build_tree'.format(i),
			'-l', 'ncpus=1',
			'-l', 'mem=1gb',
			'-l', 'walltime=1:00:00',
			'-q', 'smallq',
			'-j', 'oe',
			'-o', os.path.join(base_path, 'logs', 'build_tree.log'.format(i)),
			'-v', 'base_path={}'.format(base_path),
			os.path.join(base_path, 'scripts', 'build_tree-hpc')])


if __name__ == '__main__':
	main()